{"version":3,"sources":["data/initial.js","data/reducers.js","data/store.js","Components/Title.js","Components/NumberInput/NumberInput.js","Components/NumberInput/index.js","data/actions/state.js","Components/Form/Form.js","Components/Form/index.js","Components/EndGame/EndGame.js","Components/EndGame/index.js","Components/PlayerCard.js","Components/MatchCard/MatchCard.js","Components/MatchCard/index.js","Components/Shuffler.js","Components/TournamentGrid/TournamentGrid.js","Components/TournamentGrid/index.js","App/App.js","App/index.js","serviceWorker.js","index.js"],"names":["initial","noPlayers","playerNames","dataFlow","winner","refresh","namesSubmitted","round","reducer","state","action","type","setPlayers","setNames","setWinners","pushWinners","clearWinnerArray","clearDataArray","bracketCompleted","endGame","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","persistState","Title","className","NumberInput","props","handleClick","e","preventDefault","handleSubmit","setState","handleClear","referrer","increment","bind","decrement","this","to","onClick","Component","connect","dispatch","Form","handleInputChange","index","updatedArray","target","value","length","includes","undefined","nameError","name","handlePlayers","multiples","i","push","map","input","key","data-idx","placeholder","playerName","onChange","nameArray","EndGame","handleNextRound","PlayerCard","selected","player","MatchCard","roundWinner","prevProps","prevState","arr","players","handleWinner","Shuffler","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","TournamentGrid","pairOffPlayers","reduce","result","slice","sqrt","ceil","findSqrt","App","exact","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5c593196.chunk.js","sourcesContent":["const initial = {\n  noPlayers: 2,\n  playerNames: [],\n  dataFlow: [],\n  winner: [],\n  refresh: false,\n  namesSubmitted: false,\n  round: 1,\n};\n\nexport default initial;\n","const setPlayers = (state, action) => ({\n  ...state,\n  noPlayers: action.noPlayers.noPlayers,\n});\n\nconst setNames = (state, action) => ({\n  ...state,\n  playerNames: action.playerNames.playerNames,\n  namesSubmitted: true,\n});\n\nconst setWinners = (state, action) => ({\n  ...state,\n  winner: [...state.winner, action.winner],\n  refresh: false,\n});\n\nconst pushWinners = (state) => ({\n  ...state,\n  dataFlow: [...state.winner],\n  refresh: true,\n  winner: [],\n  round: state.round + 1,\n});\nconst clearWinnerArray = (state) => ({\n  ...state,\n  winner: [],\n});\n\nconst clearDataArray = (state) => ({\n  ...state,\n  dataFlow: [],\n});\n\nconst endGame = (state) => ({\n  ...state,\n  dataFlow: [],\n  winner: [],\n  playerNames: [],\n  noPlayers: 0,\n  namesSubmitted: false,\n  round: 1,\n  bracketCompleted: false,\n});\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"UPDATE_NO\":\n      return setPlayers(state, action);\n    case \"UPDATE_NAMES\":\n      return setNames(state, action);\n    case \"UPDATE_WINNERS\":\n      return setWinners(state, action);\n    case \"PUSH_WINNERS\":\n      return pushWinners(state);\n    case \"CLEAR_WINNER_ARRAY\":\n      return clearWinnerArray(state);\n    case \"CLEAR_DATA_ARRAY\":\n      return clearDataArray(state);\n    case \"END_GAME\":\n      return endGame(state);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore, compose } from \"redux\";\nimport initial from \"./initial\";\nimport reducer from \"./reducers\";\nimport persistState from \"redux-localstorage\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, initial, composeEnhancers(persistState()));\n\nexport default store;\n","import React from \"react\";\n\nconst Title = () => (\n  <div className=\"block\">\n    <div className=\"mt-12 flex justify-center align-center bg-red-400 pb-10 mb-10\">\n      <h1 className=\"text-2xl font-mono text-white w-100\">\n        Choose number of players\n      </h1>\n    </div>\n  </div>\n);\n\nexport default Title;\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nclass NumberInput extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      noPlayers: 2,\n      referrer: null,\n    };\n    this.increment = this.increment.bind(this);\n    this.decrement = this.decrement.bind(this);\n  }\n\n  //Increment noPlayers - 32 is an arbitrary figure, can be scaled up indefinitely (you might get tired of typing though)\n\n  increment() {\n    this.setState({\n      noPlayers:\n        this.state.noPlayers < 32\n          ? this.state.noPlayers * 2\n          : this.state.noPlayers,\n    });\n  }\n\n  //Decrement noPlayers - 2 is set as the lowest value\n\n  decrement() {\n    this.setState({\n      noPlayers: this.state.noPlayers > 2 ? this.state.noPlayers / 2 : 2,\n    });\n  }\n\n  // Passes the number of players to setPlayers reducer, reset local state,\n  // clears dataFlow array and redirects to /players\n  handleClick = (e) => {\n    e.preventDefault();\n    this.props.handleSubmit({ ...this.state });\n    this.setState({\n      noPlayers: 2,\n    });\n    this.props.handleClear();\n    this.setState({ referrer: \"/players\" });\n  };\n\n  render() {\n    const { noPlayers, referrer } = this.state;\n    if (referrer) return <Redirect to={referrer} />;\n    return (\n      <>\n        <div className=\" inline-block flex justify-center mt-30\">\n          <div className=\"flex-col\">\n            <div>\n              <span className=\"text-6xl px-10\">{noPlayers}</span>\n            </div>\n            <div className=\"pt-8 pb-8\">\n              {/* Decrement button */}\n              <button\n                className=\"h-10 w-10 text-2xl m-4\"\n                onClick={this.decrement}\n              >\n                -\n              </button>\n              {/* Increment button */}\n              <button\n                className=\"h-10 w-10 text-2xl m-4\"\n                onClick={this.increment}\n              >\n                +\n              </button>\n            </div>\n            {/* Submit button and handler */}\n            <button\n              className=\"m-6 block bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded w-55\"\n              onClick={this.handleClick}\n            >\n              Submit\n            </button>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default NumberInput;\n","import { connect } from \"react-redux\";\nimport NumberInput from \"./NumberInput\";\nimport { setPlayers, clearDataArray } from \"../../data/actions/state\";\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleSubmit: (noPlayers) => dispatch(setPlayers(noPlayers)),\n  handleClear: () => dispatch(clearDataArray()),\n});\n\nexport default connect(null, mapDispatchToProps)(NumberInput);\n","export const setPlayers = (noPlayers) => {\n  return {\n    type: \"UPDATE_NO\",\n    noPlayers: noPlayers,\n  };\n};\n\nexport const setNames = (nameArray) => {\n  return {\n    type: \"UPDATE_NAMES\",\n    playerNames: nameArray,\n  };\n};\n\nexport const setWinners = (roundWinner) => {\n  return {\n    type: \"UPDATE_WINNERS\",\n    winner: roundWinner,\n  };\n};\n\nexport const pushWinners = () => {\n  return {\n    type: \"PUSH_WINNERS\",\n  };\n};\n\nexport const clearDataArray = () => {\n  return {\n    type: \"CLEAR_DATA_ARRAY\",\n  };\n};\n\nexport const clearWinnerArray = () => {\n  return {\n    type: \"CLEAR_WINNER_ARRAY\",\n  };\n};\n\nexport const endGame = () => {\n  return {\n    type: \"END_GAME\",\n  };\n};\n","import React, { Component } from \"react\";\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      playerNames: [],\n      nameError: false,\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  //Creates a new array, including playerNames stored in state, and adds players. The result is assigned to playerNames\n  handleInputChange = (e, index) => {\n    const updatedArray = [...this.state.playerNames];\n    // Set the current target value to the assigned index\n    updatedArray[index] = e.target.value;\n    this.setState({\n      playerNames: updatedArray,\n    });\n  };\n  //Validates playerNames and passes to the setNames reducer\n  handleClick = (e) => {\n    e.preventDefault();\n    const { playerNames } = this.state;\n    if (\n      playerNames.length !== this.props.noPlayers ||\n      playerNames.includes(undefined)\n    ) {\n      return this.setState({ nameError: true });\n    } else {\n      this.setState([...playerNames, { name: \"\" }]);\n      this.props.handlePlayers({ ...this.state });\n    }\n  };\n\n  render() {\n    const { noPlayers } = this.props;\n    //Uses noPlayers to push x number of spans to multiples array\n    let multiples = [];\n    for (var i = 0; i < noPlayers; i++) {\n      multiples.push(<span></span>);\n    }\n\n    return (\n      <>\n        <div className=\"block\">\n          <div className=\"mt-12 flex justify-center align-center bg-red-400 pb-10 mb-10\">\n            <h1 className=\"text-2xl font-mono text-white w-100\">\n              Add player names\n            </h1>\n          </div>\n        </div>\n        <div className=\"mt-20 mb-20\">\n          <form className=\"p-2 inline-block flex flex-col justify-center m-5\">\n            <label className=\"block\">\n              <>\n                {/* Map over the multiples array and return the correct number of form inputs */}\n                {multiples.map((input, index) => (\n                  <input\n                    key={index}\n                    name=\"playerName\"\n                    className=\"form-input mt-1 block w-full p-3 w-4 mt-2 mb-2\"\n                    type=\"text\"\n                    data-idx={index}\n                    placeholder={\"Player \" + (index + 1)}\n                    value={index.playerName}\n                    // Passes data to playerNames array\n                    onChange={(e) => this.handleInputChange(e, index)}\n                  />\n                ))}\n                <div className=\"text-red-500 text-xs\">\n                  {/* Error message for form validation */}\n                  {this.state.nameError\n                    ? \"Please enter names for all players\"\n                    : null}\n                </div>\n              </>\n            </label>\n            <div className=\"flex justify-center mt-20\">\n              {/* Submit button */}\n              <button\n                className=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded inline-block w-55 \"\n                onClick={this.handleClick}\n              >\n                Submit\n              </button>\n            </div>\n          </form>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Form;\n","import { connect } from \"react-redux\";\nimport Form from \"./Form\";\nimport { setNames } from \"../../data/actions/state\";\n\nconst mapStateToProps = ({ noPlayers }) => {\n  return {\n    noPlayers,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  handlePlayers: (nameArray) => dispatch(setNames(nameArray)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nclass EndGame extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      referrer: null,\n    };\n  }\n  //Click handler for clearing game data and setting refferer to homepage\n  handleClick = (e) => {\n    e.preventDefault();\n    this.props.handleNextRound();\n    this.setState({ referrer: \"/\" });\n  };\n\n  render() {\n    let { dataFlow } = this.props;\n    let { referrer } = this.state;\n    // If referrer is truthy, redirect to homepage\n    if (referrer) return <Redirect to={referrer} />;\n    return (\n      <>\n        <div className=\"flex justify-center\">\n          <div className=\"mt-20 mb-20\">\n            <div className=\"mt-12 flex justify-center align-center bg-red-400 pb-10 mb-10 p-10 shadow-xl focus:shadow-outline\">\n              <h1 className=\"text-2xl font-mono text-white\">\n                {\" \"}\n                <p>Congratulations {dataFlow[0]} -</p>\n                <p>You are a ping pong champion!</p>\n              </h1>\n            </div>\n          </div>\n        </div>\n        <div className=\"inline-block flex justify-center\">\n          <div>\n            <button\n              className=\"inline-block bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\"\n              onClick={this.handleClick}\n            >\n              Play again\n            </button>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default EndGame;\n","import { connect } from \"react-redux\";\nimport EndGame from \"./EndGame\";\nimport { endGame } from \"../../data/actions/state\";\n\nconst mapStateToProps = ({ dataFlow }) => {\n  return {\n    dataFlow,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleNextRound: () => dispatch(endGame()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EndGame);\n","import React, { Component } from \"react\";\n\nclass PlayerCard extends Component {\n  render() {\n    return (\n      <div\n        key={this.props.key}\n        //If playerCard is selected, change colour to blue\n        className={`bg-${\n          this.props.selected ? \"blue-400\" : \"red-400\"\n        } mt-1 mb-1 h-64 w-64 flex justify-center shadow-xl focus:shadow-outline`}\n        //Use handleClick function passed in from MatchCard\n        onClick={this.props.handleClick}\n      >\n        <p className=\"text-white\">{this.props.player}</p>\n      </div>\n    );\n  }\n}\n\nexport default PlayerCard;\n","import React, { Component } from \"react\";\nimport PlayerCard from \"../PlayerCard\";\n\nclass MatchCard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selected: 0,\n      roundWinner: \"\",\n    };\n  }\n\n  //Reset \"selected\" when refresh state is triggered - resets the button divs for the next round\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.selected && this.props.refresh) {\n      this.setState({ selected: 0 });\n    }\n  }\n\n  render() {\n    // Players passed in from TournamentGrid\n    let arr = this.props.players;\n    // Array keys passed in from TournamentGrid\n    let key = this.props.key;\n    let { selected } = this.state;\n    return (\n      // If selected, disable the button div\n      <div className={`${selected ? \"pointer-events-none\" : null} mt-4 mb-4`}>\n        <>\n          <PlayerCard\n            // The selected, key and player values for this card\n            player={arr[0]}\n            selected={selected === 1}\n            key={key}\n            handleClick={() =>\n              // Set selected and roundWinner, then pass the state into child component\n              this.setState({ selected: 1, roundWinner: arr[0] }, () =>\n                this.props.handleWinner(this.state.roundWinner)\n              )\n            }\n          />\n          <PlayerCard\n            // The selected, key and player values for this card\n            player={arr[1]}\n            key={key}\n            selected={selected === 2}\n            handleClick={() =>\n              // Set selected and roundWinner, then pass the state into child component\n              this.setState({ selected: 2, roundWinner: arr[1] }, () =>\n                this.props.handleWinner(this.state.roundWinner)\n              )\n            }\n          />\n        </>\n      </div>\n    );\n  }\n}\n\nexport default MatchCard;\n","import { connect } from \"react-redux\";\nimport MatchCard from \"./MatchCard\";\nimport { setWinners } from \"../../data/actions/state\";\n\nconst mapStateToProps = ({ winner, refresh }) => {\n  return {\n    winner,\n    refresh,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleWinner: (roundWinner) => dispatch(setWinners(roundWinner)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MatchCard);\n","function Shuffler(array) {\n  let currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n}\n\nexport default Shuffler;\n","import React, { Component } from \"react\";\nimport MatchCard from \"../MatchCard\";\nimport Shuffler from \"../Shuffler\";\nimport { Redirect } from \"react-router-dom\";\n\nclass TournamentGrid extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      refresh: !this.props.refresh,\n      referrer: null,\n    };\n  }\n  render() {\n    //Sets up routing on to next round\n    let { referrer } = this.state;\n    if (referrer) return <Redirect to={referrer} />;\n\n    //Passes dataFlow or playerNames into Shuffler function.\n    //playerNames is passed in first.\n    // dataFlow is empty until the first round is over, so is only used once players have been added\n    let randomisePlayers = Shuffler(\n      this.props.dataFlow.length > 0\n        ? this.props.dataFlow\n        : this.props.playerNames\n    );\n\n    // Players are randomised and split into a series of arrays of 2. This function is called on randomisePlayers each round\n    let pairOffPlayers = randomisePlayers.reduce(function (\n      result,\n      value,\n      index,\n      array\n    ) {\n      if (index % 2 === 0) result.push(array.slice(index, index + 2));\n      return result;\n    },\n    []);\n\n    //This functions takes the round and the number of players and returns either \"final\" or the round number - refactor this as it's quite confusing\n    let findSqrt = (round, noPlayers) => {\n      let sqrt = Math.ceil(Math.sqrt(noPlayers));\n      if (round === 5 || noPlayers === 2) {\n        return true;\n      }\n      return round % noPlayers === sqrt;\n    };\n\n    return (\n      <>\n        <div className=\"block\">\n          <div className=\"mt-12 flex justify-center align-center bg-red-300 pb-10 mb-10\">\n            <h1 className=\"text-2xl font-mono text-white w-100\">\n              {\" \"}\n              {findSqrt(this.props.round, this.props.noPlayers)\n                ? \"Final\"\n                : \"Round \" + this.props.round}\n            </h1>\n          </div>\n        </div>\n        <div className=\"inline-block flex justify-center\">\n          <div>\n            <div\n              // Change the column structure based on the number of matchcards displayed\n              className={`ml-2 mr-2 md:grid grid-cols-${\n                this.props.dataFlow.length === 2 || this.props.noPlayers === 2\n                  ? 1\n                  : 2\n              } gap-4 content-center`}\n            >\n              {/* Map over pairOffPlayers array and pass two players into each MatchCard */}\n              {pairOffPlayers.map((players, index) => (\n                <div key={index} className=\"mt-3 mb-3\">\n                  <MatchCard players={players} />\n                </div>\n              ))}\n            </div>\n            <div className=\"inline-block flex justify-center\">\n              <button\n                className={`m-6 block bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded w-55 ${\n                  // Checks if the winner is equal to playerNames or dataFlow /2 and returns pointer-events-none if not\n                  (this.props.winner.length > 0 &&\n                    this.props.winner.length ===\n                      this.props.playerNames.length / 2) ||\n                  (this.props.winner.length > 0 &&\n                    this.props.winner.length === this.props.dataFlow.length / 2)\n                    ? \"\"\n                    : \"pointer-events-none\"\n                } `}\n                //Either redirect to \"endgame\" or click through to a new round\n                onClick={\n                  this.props.dataFlow.length === 1\n                    ? this.setState({ referrer: \"/endgame\" })\n                    : this.props.handleNextRound\n                }\n              >\n                Next\n              </button>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default TournamentGrid;\n","import { connect } from \"react-redux\";\nimport TournamentGrid from \"./TournamentGrid\";\nimport { pushWinners } from \"../../data/actions/state\";\n\nconst mapStateToProps = ({\n  playerNames,\n  dataFlow,\n  round,\n  noPlayers,\n  winner,\n}) => {\n  return {\n    playerNames,\n    dataFlow,\n    round,\n    noPlayers,\n    winner,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleNextRound: () => dispatch(pushWinners()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TournamentGrid);\n","import React from \"react\";\nimport Title from \"../Components/Title\";\nimport NumberInput from \"../Components/NumberInput\";\nimport Form from \"../Components/Form\";\nimport EndGame from \"../Components/EndGame\";\nimport TournamentGrid from \"../Components/TournamentGrid\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\n\nconst App = ({\n  noPlayers,\n  playerNames,\n  dataFlow,\n  winner,\n  refresh,\n  namesSubmitted,\n}) => (\n  <>\n    <div className=\"container mx-auto text-lg font-hind\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Title />\n            <NumberInput />\n          </Route>\n          <Route exact path=\"/players\">\n            {namesSubmitted ? <TournamentGrid /> : <Form />}\n          </Route>\n          <Route exact path=\"/endgame\">\n            <EndGame />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  </>\n);\n\nexport default App;\n","import { connect } from \"react-redux\";\nimport App from \"./App\";\n\nconst mapStateToProps = ({\n  noPlayers,\n  playerNames,\n  dataFlow,\n  winner,\n  refresh,\n  namesSubmitted,\n}) => {\n  return {\n    noPlayers,\n    playerNames,\n    dataFlow,\n    winner,\n    refresh,\n    namesSubmitted,\n  };\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import store from \"./data/store\";\nimport { Provider } from \"react-redux\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./tailwind.output.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}