{"version":3,"sources":["data/initial.js","data/reducers.js","data/store.js","Components/Title.js","Components/NumberInput/NumberInput.js","Components/NumberInput/index.js","data/actions/state.js","Components/Form/Form.js","Components/Form/index.js","Components/PlayerCard.js","Components/Shuffler.js","Components/MatchCard/MatchCard.js","Components/MatchCard/index.js","Components/EndGame/EndGame.js","Components/EndGame/index.js","Components/TournamentGrid/TournamentGrid.js","Components/TournamentGrid/index.js","App/App.js","App/index.js","serviceWorker.js","index.js"],"names":["initial","noPlayers","playerNames","dataFlow","winner","refresh","namesSubmitted","round","reducer","state","action","type","setPlayers","setNames","setWinners","pushWinners","clearWinnerArray","clearDataArray","endGame","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","persistState","Title","className","NumberInput","props","handleClick","e","preventDefault","handleSubmit","setState","handleClear","referrer","increment","bind","decrement","this","to","onClick","Component","connect","dispatch","Form","handleInputChange","index","updatedArray","target","value","length","every","x","undefined","nameError","name","handlePlayers","console","log","multiples","i","push","map","input","key","data-idx","placeholder","playerName","onChange","nameArray","PlayerCard","selected","player","Shuffler","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","MatchCard","roundWinner","prevProps","prevState","arr","players","handleWinner","EndGame","handleNextRound","TournamentGrid","pairOffPlayers","reduce","result","slice","value1","value2","sqrt","ceil","findSqrt","App","exact","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ed1dad22.chunk.js","sourcesContent":["const initial = {\n  noPlayers: 2,\n  playerNames: [],\n  dataFlow: [],\n  winner: [],\n  refresh: false,\n  namesSubmitted: false,\n  round: 1,\n};\n\nexport default initial;\n","import { handleToggleID } from \"./actions/state\";\nimport initial from \"./initial\";\n\nconst setPlayers = (state, action) => ({\n  ...state,\n  noPlayers: action.noPlayers.noPlayers,\n});\n\nconst setNames = (state, action) => ({\n  ...state,\n  playerNames: action.playerNames.playerNames,\n  namesSubmitted: true,\n});\n\nconst setWinners = (state, action) => ({\n  ...state,\n  winner: [...state.winner, action.winner],\n  refresh: false,\n});\n\nconst pushWinners = (state) => ({\n  ...state,\n  dataFlow: [...state.winner],\n  refresh: true,\n  winner: [],\n  round: state.round + 1,\n});\n\nconst clearWinnerArray = (state) => ({\n  ...state,\n  winner: [],\n});\n\nconst clearDataArray = (state) => ({\n  ...state,\n  dataFlow: [],\n});\n\nconst endGame = (state) => ({\n  ...state,\n  dataFlow: [],\n  winner: [],\n  playerNames: [],\n  noPlayers: 0,\n  namesSubmitted: false,\n  round: 1,\n});\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"UPDATE_NO\":\n      return setPlayers(state, action);\n    case \"UPDATE_NAMES\":\n      return setNames(state, action);\n    case \"UPDATE_WINNERS\":\n      return setWinners(state, action);\n    case \"PUSH_WINNERS\":\n      return pushWinners(state);\n    case \"CLEAR_WINNER_ARRAY\":\n      return clearWinnerArray(state);\n    case \"CLEAR_DATA_ARRAY\":\n      return clearDataArray(state);\n    case \"END_GAME\":\n      return endGame(state);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport initial from \"./initial\";\nimport reducer from \"./reducers\";\nimport persistState from \"redux-localstorage\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, initial, composeEnhancers(persistState()));\n\nexport default store;\n","import React from \"react\";\n\nconst Title = () => (\n  <div className=\"block\">\n    <div className=\"mt-12 flex justify-center align-center bg-red-400 pb-10 mb-10\">\n      <h1 className=\"text-2xl font-mono text-white w-100\">\n        Choose number of players\n      </h1>\n    </div>\n  </div>\n);\n\nexport default Title;\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nclass NumberInput extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      noPlayers: 2,\n      referrer: null,\n    };\n    this.increment = this.increment.bind(this);\n    this.decrement = this.decrement.bind(this);\n  }\n\n  //Increment noPlayers\n\n  increment() {\n    this.setState({\n      noPlayers:\n        this.state.noPlayers < 32\n          ? this.state.noPlayers * 2\n          : this.state.noPlayers,\n    });\n  }\n\n  //Decrement noPlayers\n\n  decrement() {\n    this.setState({\n      noPlayers: this.state.noPlayers > 2 ? this.state.noPlayers / 2 : 2,\n    });\n  }\n\n  // Passes the number of players to setPlayers reducer, reset local state,\n  // clears dataFlow array and redirects to /players\n\n  handleClick = (e) => {\n    e.preventDefault();\n    this.props.handleSubmit({ ...this.state });\n    this.setState({\n      noPlayers: 2,\n    });\n    this.props.handleClear();\n    this.setState({ referrer: \"/players\" });\n  };\n\n  render() {\n    const { handleClick, increment, decrement } = this.props;\n    const { noPlayers, referrer } = this.state;\n    if (referrer) return <Redirect to={referrer} />;\n    return (\n      <>\n        <div className=\" inline-block flex justify-center mt-30\">\n          <div className=\"flex-col\">\n            <div>\n              <span className=\"text-6xl px-10\">{noPlayers}</span>\n            </div>\n            <div className=\"pt-8 pb-8\">\n              <button\n                className=\"h-10 w-10 text-2xl m-4\"\n                onClick={this.decrement}\n              >\n                -\n              </button>\n              <button\n                className=\"h-10 w-10 text-2xl m-4\"\n                onClick={this.increment}\n              >\n                +\n              </button>\n            </div>\n\n            <button\n              className=\"m-6 block bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded w-55\"\n              onClick={this.handleClick}\n            >\n              Submit\n            </button>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default NumberInput;\n","import { connect } from \"react-redux\";\nimport NumberInput from \"./NumberInput\";\nimport { setPlayers, clearDataArray } from \"../../data/actions/state\";\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleSubmit: (noPlayers) => dispatch(setPlayers(noPlayers)),\n  handleClear: () => dispatch(clearDataArray()),\n});\n\nexport default connect(null, mapDispatchToProps)(NumberInput);\n","export const setPlayers = (noPlayers) => {\n  return {\n    type: \"UPDATE_NO\",\n    noPlayers: noPlayers,\n  };\n};\n\nexport const setNames = (nameArray) => {\n  return {\n    type: \"UPDATE_NAMES\",\n    playerNames: nameArray,\n  };\n};\n\nexport const setWinners = (roundWinner) => {\n  return {\n    type: \"UPDATE_WINNERS\",\n    winner: roundWinner,\n  };\n};\n\nexport const pushWinners = () => {\n  return {\n    type: \"PUSH_WINNERS\",\n  };\n};\n\nexport const clearDataArray = () => {\n  return {\n    type: \"CLEAR_DATA_ARRAY\",\n  };\n};\n\nexport const clearWinnerArray = () => {\n  return {\n    type: \"CLEAR_WINNER_ARRAY\",\n  };\n};\n\nexport const endGame = () => {\n  return {\n    type: \"END_GAME\",\n  };\n};\n","import React, { Component } from \"react\";\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      playerNames: [],\n      nameError: false,\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  //Creates a new array and adds player names before inserting into playerNames\n  handleInputChange = (e, index) => {\n    const updatedArray = [...this.state.playerNames];\n    updatedArray[index] = e.target.value;\n    this.setState({\n      playerNames: updatedArray,\n    });\n  };\n  //Passes playerNames to the setNames reducer\n  handleClick = (e) => {\n    e.preventDefault();\n    const { playerNames } = this.state;\n    if (\n      playerNames.length === this.props.noPlayers &&\n      playerNames.every((x) => x !== undefined)\n    ) {\n      this.setState([...playerNames, { name: \"\" }]);\n      this.props.handlePlayers({ ...this.state });\n    } else {\n      return this.setState({ nameError: true });\n    }\n  };\n\n  render() {\n    console.log(this.state.playerNames);\n    const { playerNames } = this.state;\n    const { noPlayers, handleClick } = this.props;\n    //Uses noPlayers to push x number of divs to multiples array\n    let multiples = [];\n    for (var i = 0; i < noPlayers; i++) {\n      multiples.push(<div></div>);\n    }\n\n    return (\n      <>\n        <div className=\"block\">\n          <div className=\"mt-12 flex justify-center align-center bg-red-400 pb-10 mb-10\">\n            <h1 className=\"text-2xl font-mono text-white w-100\">\n              Add player names\n            </h1>\n          </div>\n        </div>\n        <div className=\"mt-20 mb-20\">\n          <form className=\"p-2 inline-block flex flex-col justify-center m-5\">\n            <label className=\"block\">\n              <>\n                {/* Map over the multiples array and return the correct number of form inputs */}\n                {multiples.map((input, index) => (\n                  <input\n                    key={index}\n                    name=\"playerName\"\n                    className=\"form-input mt-1 block w-full p-3 w-4 mt-2 mb-2\"\n                    type=\"text\"\n                    data-idx={index}\n                    placeholder={\"Player \" + (index + 1)}\n                    value={index.playerName}\n                    // Passes data to playerNames array\n                    onChange={(e) => this.handleInputChange(e, index)}\n                  />\n                ))}\n                <div className=\"text-red-500 text-xs\">\n                  {this.state.nameError\n                    ? \"Please enter names for all players\"\n                    : null}\n                </div>\n              </>\n            </label>\n            <div className=\"flex justify-center mt-20\">\n              <button\n                className=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded inline-block w-55 \"\n                onClick={this.handleClick}\n              >\n                Submit\n              </button>\n            </div>\n          </form>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Form;\n","import { connect } from \"react-redux\";\nimport Form from \"./Form\";\nimport { setNames } from \"../../data/actions/state\";\n\nconst mapStateToProps = ({ noPlayers }) => {\n  return {\n    noPlayers,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  handlePlayers: (nameArray) => dispatch(setNames(nameArray)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React, { Component } from \"react\";\n\nclass PlayerCard extends Component {\n  render() {\n    return (\n      <div\n        key={this.props.key}\n        //If playerCard is selected, change colour to blue\n        className={`bg-${\n          this.props.selected ? \"blue-400\" : \"red-400\"\n        } mt-1 mb-1 h-64 w-64 flex justify-center shadow-xl focus:shadow-outline`}\n        //Use handleClick function passed in from MatchCard\n        onClick={this.props.handleClick}\n      >\n        <p className=\"text-white\">{this.props.player}</p>\n      </div>\n    );\n  }\n}\n\nexport default PlayerCard;\n","import react from \"react\";\n\nfunction Shuffler(array) {\n  let currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n}\n\nexport default Shuffler;\n","import React, { Component } from \"react\";\nimport PlayerCard from \"../PlayerCard\";\nimport Shuffler from \"../Shuffler\";\n\nclass MatchCard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selected: 0,\n      roundWinner: \"\",\n    };\n  }\n\n  //Reset the selected state when refresh state is triggered\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.selected && this.props.refresh) {\n      this.setState({ selected: 0 });\n    }\n  }\n\n  render() {\n    let arr = this.props.players;\n    let key = this.props.key;\n    let { selected } = this.state;\n    return (\n      <div className={`${selected ? \"pointer-events-none\" : null} mt-4 mb-4`}>\n        <>\n          <PlayerCard\n            player={arr[0]}\n            selected={selected === 1}\n            key={key}\n            handleClick={() =>\n              this.setState({ selected: 1, roundWinner: arr[0] }, () =>\n                this.props.handleWinner(this.state.roundWinner)\n              )\n            }\n          />\n          <PlayerCard\n            player={arr[1]}\n            key={key}\n            selected={selected === 2}\n            handleClick={() =>\n              this.setState({ selected: 2, roundWinner: arr[1] }, () =>\n                this.props.handleWinner(this.state.roundWinner)\n              )\n            }\n          />\n        </>\n      </div>\n    );\n  }\n}\n\nexport default MatchCard;\n","import { connect } from \"react-redux\";\nimport MatchCard from \"./MatchCard\";\nimport { setWinners } from \"../../data/actions/state\";\n\nconst mapStateToProps = ({ winner, refresh }) => {\n  return {\n    winner,\n    refresh,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleWinner: (roundWinner) => dispatch(setWinners(roundWinner)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MatchCard);\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nclass EndGame extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      referrer: null,\n    };\n  }\n  //Click handler for clearing game data and returning user to homepage\n  handleClick = (e) => {\n    e.preventDefault();\n    this.props.handleNextRound();\n    this.setState({ referrer: \"/\" });\n  };\n\n  render() {\n    let { handleClick, dataFlow } = this.props;\n    let { referrer } = this.state;\n    if (referrer) return <Redirect to={referrer} />;\n    return (\n      <>\n        <div className=\"flex justify-center\">\n          <div className=\"mt-20 mb-20\">\n            <div className=\"mt-12 flex justify-center align-center bg-red-400 pb-10 mb-10 p-10 shadow-xl focus:shadow-outline\">\n              <h1 className=\"text-2xl font-mono text-white\">\n                {\" \"}\n                <p>Congratulations {dataFlow[0]} </p>\n                <p>You are a ping pong champion!</p>\n              </h1>\n            </div>\n          </div>\n        </div>\n        <div className=\"inline-block flex justify-center\">\n          <div>\n            <button\n              className=\"inline-block bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\"\n              onClick={this.handleClick}\n            >\n              Play again\n            </button>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default EndGame;\n","import { connect } from \"react-redux\";\nimport EndGame from \"./EndGame\";\nimport { endGame } from \"../../data/actions/state\";\n\nconst mapStateToProps = ({ dataFlow }) => {\n  return {\n    dataFlow,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleNextRound: () => dispatch(endGame()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EndGame);\n","import React, { Component } from \"react\";\nimport MatchCard from \"../MatchCard\";\nimport Shuffler from \"../Shuffler\";\nimport { Redirect } from \"react-router-dom\";\n\nclass TournamentGrid extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      refresh: !this.props.refresh,\n      referrer: null,\n    };\n  }\n  render() {\n    //Sets up routing on to next round\n    let { referrer } = this.state;\n    if (referrer) return <Redirect to={referrer} />;\n\n    //Passes dataFlow or playerNames into Shuffler function.\n    //playerNames is passed in first, dataFlow after once players have been added\n    let randomisePlayers = Shuffler(\n      this.props.dataFlow.length > 0\n        ? this.props.dataFlow\n        : this.props.playerNames\n    );\n\n    //Splits players into arrays of 2\n    let pairOffPlayers = randomisePlayers.reduce(function (\n      result,\n      value,\n      index,\n      array\n    ) {\n      if (index % 2 === 0) result.push(array.slice(index, index + 2));\n      return result;\n    },\n    []);\n\n    //Checks whether the modulus of two passed in values is equal to the sqrt of the second value\n    let findSqrt = (value1, value2) => {\n      let sqrt = Math.ceil(Math.sqrt(value2));\n      if (value1 === 5) {\n        return true;\n      }\n      return value1 % value2 === sqrt;\n    };\n    return (\n      <>\n        <div className=\"block\">\n          <div className=\"mt-12 flex justify-center align-center bg-red-300 pb-10 mb-10\">\n            <h1 className=\"text-2xl font-mono text-white w-100\">\n              {\" \"}\n              {findSqrt(this.props.round, this.props.noPlayers)\n                ? \"Final\"\n                : \"Round \" + this.props.round}\n            </h1>\n          </div>\n        </div>\n        <div className=\"inline-block flex justify-center\">\n          <div>\n            <div\n              className={`ml-2 mr-2 md:grid grid-cols-${\n                this.props.dataFlow.length !== 2 ? 2 : 1\n              } gap-4 content-center`}\n            >\n              {/* Map over pairOffPlayers array and pass two players into each MatchCard */}\n              {pairOffPlayers.map((players, index) => (\n                <div key={index} className=\"mt-3 mb-3\">\n                  <MatchCard players={players} />\n                </div>\n              ))}\n            </div>\n            <div className=\"inline-block flex justify-center\">\n              <button\n                className=\"m-6 block bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded w-55\"\n                onClick={\n                  this.props.dataFlow.length === 1\n                    ? this.setState({ referrer: \"/endgame\" })\n                    : this.props.handleNextRound\n                }\n              >\n                Next\n              </button>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default TournamentGrid;\n","import { connect } from \"react-redux\";\nimport TournamentGrid from \"./TournamentGrid\";\nimport { pushWinners } from \"../../data/actions/state\";\n\nconst mapStateToProps = ({ playerNames, dataFlow, round, noPlayers }) => {\n  return {\n    playerNames,\n    dataFlow,\n    round,\n    noPlayers,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleNextRound: () => dispatch(pushWinners()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TournamentGrid);\n","import React from \"react\";\nimport Title from \"../Components/Title\";\nimport NumberInput from \"../Components/NumberInput\";\nimport Form from \"../Components/Form\";\nimport PlayerCard from \"../Components/PlayerCard\";\nimport MatchCard from \"../Components/MatchCard\";\nimport EndGame from \"../Components/EndGame\";\nimport TournamentGrid from \"../Components/TournamentGrid\";\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n  useHistory,\n} from \"react-router-dom\";\n\nconst App = ({\n  noPlayers,\n  playerNames,\n  dataFlow,\n  winner,\n  refresh,\n  namesSubmitted,\n}) => (\n  <>\n    <div className=\"container mx-auto text-lg font-hind\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Title />\n            <NumberInput />\n          </Route>\n          <Route exact path=\"/players\">\n            {namesSubmitted ? <TournamentGrid /> : <Form />}\n          </Route>\n          <Route exact path=\"/endgame\">\n            <EndGame />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  </>\n);\n\nexport default App;\n","import { connect } from \"react-redux\";\nimport App from \"./App\";\n\nconst mapStateToProps = ({\n  noPlayers,\n  playerNames,\n  dataFlow,\n  winner,\n  refresh,\n  namesSubmitted,\n}) => {\n  return {\n    noPlayers,\n    playerNames,\n    dataFlow,\n    winner,\n    refresh,\n    namesSubmitted,\n  };\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import store from \"./data/store\";\nimport { Provider } from \"react-redux\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./tailwind.output.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}